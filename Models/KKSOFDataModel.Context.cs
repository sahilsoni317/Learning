//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KKSOFDemoApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class KKSOFDBEntities : DbContext
    {
        public KKSOFDBEntities()
            : base("name=KKSOFDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Citizen_FollowUps> Citizen_FollowUps { get; set; }
        public DbSet<Citizen_Notes> Citizen_Notes { get; set; }
        public DbSet<Security_Citizens> Security_Citizens { get; set; }
        public DbSet<Security_User> Security_User { get; set; }
        public DbSet<Citizen_BackgroundInformation> Citizen_BackgroundInformation { get; set; }
        public DbSet<Deadline> Deadlines { get; set; }
        public DbSet<Message> Messages { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<CitizenstatusNoteMapping> CitizenstatusNoteMappings { get; set; }
        public DbSet<Citizen_FollowUpAttachments> Citizen_FollowUpAttachments { get; set; }
    
        public virtual ObjectResult<GET_CITIZENS_Result> GET_CITIZENS(string criteria)
        {
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_CITIZENS_Result>("GET_CITIZENS", criteriaParameter);
        }
    
        public virtual ObjectResult<Get_FilteredNotes_Result> Get_FilteredNotes(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<byte> docType, string name, Nullable<System.Guid> userId, string noteText)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_FilteredNotes_Result>("Get_FilteredNotes", fromdateParameter, todateParameter, docTypeParameter, nameParameter, userIdParameter, noteTextParameter);
        }
    
        public virtual ObjectResult<Get_FilteredCitizenNotes_Result> Get_FilteredCitizenNotes(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<byte> docType, string name, Nullable<System.Guid> userId, string noteText, Nullable<System.Guid> citizenId)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var citizenIdParameter = citizenId.HasValue ?
                new ObjectParameter("CitizenId", citizenId) :
                new ObjectParameter("CitizenId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_FilteredCitizenNotes_Result>("Get_FilteredCitizenNotes", fromdateParameter, todateParameter, docTypeParameter, nameParameter, userIdParameter, noteTextParameter, citizenIdParameter);
        }
    
        public virtual ObjectResult<Get_FilteredMessages_Result> Get_FilteredMessages(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type, string messageStatus, string citizenInfo, string text, Nullable<System.Guid> responsible)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var messageStatusParameter = messageStatus != null ?
                new ObjectParameter("MessageStatus", messageStatus) :
                new ObjectParameter("MessageStatus", typeof(string));
    
            var citizenInfoParameter = citizenInfo != null ?
                new ObjectParameter("CitizenInfo", citizenInfo) :
                new ObjectParameter("CitizenInfo", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var responsibleParameter = responsible.HasValue ?
                new ObjectParameter("Responsible", responsible) :
                new ObjectParameter("Responsible", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_FilteredMessages_Result>("Get_FilteredMessages", fromdateParameter, todateParameter, typeParameter, messageStatusParameter, citizenInfoParameter, textParameter, responsibleParameter);
        }
    
        public virtual ObjectResult<Get_FilteredCitizenMessages_Result> Get_FilteredCitizenMessages(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type, string messageStatus, string citizenInfo, string text, Nullable<System.Guid> citizenId)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var messageStatusParameter = messageStatus != null ?
                new ObjectParameter("MessageStatus", messageStatus) :
                new ObjectParameter("MessageStatus", typeof(string));
    
            var citizenInfoParameter = citizenInfo != null ?
                new ObjectParameter("CitizenInfo", citizenInfo) :
                new ObjectParameter("CitizenInfo", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var citizenIdParameter = citizenId.HasValue ?
                new ObjectParameter("CitizenId", citizenId) :
                new ObjectParameter("CitizenId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_FilteredCitizenMessages_Result>("Get_FilteredCitizenMessages", fromdateParameter, todateParameter, typeParameter, messageStatusParameter, citizenInfoParameter, textParameter, citizenIdParameter);
        }
    
        public virtual ObjectResult<Get_FilteredDeadlines_Result> Get_FilteredDeadlines(string citizenInfo, Nullable<bool> isRedDeadline)
        {
            var citizenInfoParameter = citizenInfo != null ?
                new ObjectParameter("CitizenInfo", citizenInfo) :
                new ObjectParameter("CitizenInfo", typeof(string));
    
            var isRedDeadlineParameter = isRedDeadline.HasValue ?
                new ObjectParameter("IsRedDeadline", isRedDeadline) :
                new ObjectParameter("IsRedDeadline", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_FilteredDeadlines_Result>("Get_FilteredDeadlines", citizenInfoParameter, isRedDeadlineParameter);
        }
    
        public virtual ObjectResult<Get_CitizenbyGUID_Result> Get_CitizenbyGUID(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_CitizenbyGUID_Result>("Get_CitizenbyGUID", idParameter);
        }
    }
}
